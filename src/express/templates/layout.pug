include partials/meta.pug

style.
  a.active{
    pointer-events: none;
  }

mixin pagination(page, totalPages, width, prefix)
  -
    // вычислим начальную и конечную страницу диапазона без учёта ограничений
    let start = page - width;
    let end = page + width;

    // передвинем диапазон вправо, если он начинается с номера меньше единицы
    if(start < 1){
      end += 1 - start;
      start = 1;
    }
    // передвинем диапазон влево, если он заканчивается номером больше количества страниц
    if(end > totalPages){
      start -= end - totalPages;
      end = totalPages;
    }

    // если мы оказались в этой ветке, значит, всего страниц слишком мало. делаем начало диапазона 1
    if(start < 1){
      start = 1;
    }
    let i = start - 1

  .preview__toggle-wrapper
    ul.preview__pagination.pagination
      if start > 1
        li.pagination__item
          a.pagination__button.button.button--backwards.button--disabled(href=`${prefix}page=${page - 1}`, aria-label='Страница назад') Назад
      while i++ < end
        li.pagination__item(class={'pagination__item--active': i === page})
          a(href=`${prefix}page=${i}`)= i
      if end < totalPages
        li.pagination__item
          a.pagination__button.button.button--forward(href=`${prefix}page=${page + 1}`, aria-label='Страница вперед') Вперёд

.wrapper(class=(renderPage == 'all-categories' || renderPage == 'my' || renderPage == 'comments' ? 'wrapper--nobackground' : ''))
  include partials/header.pug
  block content
  include partials/footer.pug

script(src='/js/vendor.js')
script(src='/js/main.js')
